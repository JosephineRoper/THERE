{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5427baeb",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "2c6e251a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandana as pdna\n",
    "import geopandas as gpd\n",
    "import pandas as pd\n",
    "import math\n",
    "import networkx as nx\n",
    "import sys\n",
    "# adding functions \n",
    "sys.path.insert(0, 'C:\\\\Users\\\\z3258367\\\\OneDrive - UNSW\\\\#PhD\\\\Walkability\\\\Other Cities\\\\Open-Walk-Index')\n",
    "from walkability_functions import *"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ee150b9",
   "metadata": {},
   "source": [
    "Choose a projected CRS to be used for all distance calculations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0dc18490",
   "metadata": {},
   "outputs": [],
   "source": [
    "proj_crs = \"EPSG:7856\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dc208e1",
   "metadata": {},
   "source": [
    "## Import Data\n",
    "\n",
    "Data sources:\n",
    "1. Shape of Greater Sydney - used to clip points\n",
    "2. Points of interest from OSM - using Geofabriks shapefiles as the source\n",
    "3. Transport for NSW public transport stops\n",
    "4. Spatial Services NSW for additional POIs\n",
    "5. Employment data - processed from ABS originally"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c4f527da",
   "metadata": {},
   "outputs": [],
   "source": [
    "folder = \"C:\\\\Users\\\\z3258367\\\\OneDrive - UNSW\\\\#PhD\\\\\"\n",
    "Greater_Sydney = gpd.read_file((folder + \n",
    "    \"Data\\\\greater_sydney_shape\\\\Greater_Sydney_Dissolve.shp\")\n",
    "    ).to_crs(proj_crs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5b30448f",
   "metadata": {},
   "outputs": [],
   "source": [
    "osm_poi_points = gpd.read_file(''.join((folder, \n",
    "    \"Walkability\\\\Mavoa\\\\Pandana inputs\\\\Greater_Sydney_OSM_POIs_sp.shp\")))\n",
    "osm_poi_areas = gpd.read_file(folder + \n",
    "    \"Walkability\\\\Mavoa\\\\Pandana inputs\\\\Greater_Sydney_OSM_POIs_a_sp.gpkg\")\n",
    "osm_transport_points = gpd.read_file(folder +\n",
    "    \"Walkability\\\\Mavoa\\\\Pandana inputs\\\\Greater_Sydney_OSM_transport_sp.shp\")\n",
    "osm_transport_areas =  gpd.read_file(folder +\n",
    "    \"Data\\\\OSM-australia-latest-free\\\\gis_osm_transport_a_free_1.shp\")\n",
    "osm_pow_points = gpd.read_file(folder + \n",
    "    \"Data\\\\OSM-australia-latest-free\\\\gis_osm_pofw_free_1.shp\")\n",
    "osm_pow_areas = gpd.read_file(folder + \n",
    "    \"Data\\\\OSM-australia-latest-free\\\\gis_osm_pofw_a_free_1.shp\")\n",
    "osm_natural = gpd.read_file(folder + \n",
    "    \"Data\\\\OSM-australia-latest-free\\\\gis_osm_natural_a_free_1.shp\")\n",
    "\n",
    "# the OSM POIs includes domestic swimming pools in some suburbs. This line removes swimming pools less than 100m2.\n",
    "# Same for domestic tennis courts appearing as 'pitches'. Removed pitches below 450m2.\n",
    "osm_poi_areas = osm_poi_areas[~((osm_poi_areas['fclass']=='swimming_pool') & (osm_poi_areas.to_crs(proj_crs).area < 100))]\n",
    "osm_poi_areas = osm_poi_areas[~((osm_poi_areas['fclass']=='pitch') & (osm_poi_areas.to_crs(proj_crs).area < 450))]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "06524e14",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import SS NSW data\n",
    "SS_NSW = gpd.read_file((folder + \n",
    "                        \"Data\\\\NSW Spatial Services\\\\NSW_Features_of_Interest_Category.gdb\"),layer='BuildingComplexPoint')\n",
    "SS_NSW.to_crs(Greater_Sydney.crs, inplace = True)\n",
    "SS_NSW['fclass'] = (SS_NSW['classsubtype'].astype(str) + \"-\" \n",
    "                    + SS_NSW['buildingcomplextype'].astype(str))\n",
    "\n",
    "# add general cultural points\n",
    "SS_NSW_gc = gpd.read_file((folder + \n",
    "                           \"Data\\\\NSW Spatial Services\\\\NSW_Features_of_Interest_Category.gdb\"),layer='GeneralCulturalPoint')\n",
    "SS_NSW_gc.to_crs(Greater_Sydney.crs, inplace = True)\n",
    "SS_NSW_gc['fclass'] = (SS_NSW_gc['classsubtype'].astype(str) + \"-\" \n",
    "                       + SS_NSW_gc['generalculturaltype'].astype(str) + \"-gc\")\n",
    "\n",
    "SS_NSW = pd.concat([SS_NSW, SS_NSW_gc]).to_crs(proj_crs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "ab2869c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "SS_names = {'4-10': 'shopping centre', '2-18': 'post office', '2-16': 'place of worship',\n",
    " '3-3': 'health centre', '3-5': 'health centre', '3-6': 'health centre',\n",
    " '1-1': 'school', '1-2': 'school', '1-3': 'school', '1-5': 'school', '1-6': 'school',\n",
    " '1-8': 'school', '1-4': 'university', '1-7': 'childcare',\n",
    " '2-2': 'art gallery', '2-11': 'library', '2-14': 'museum',\n",
    " '6-12': 'sports centre', '6-18': 'zoo', '1-6-gc': 'outdoor theater',\n",
    " '6-15': 'swimming pool', '9-2-gc': 'swimming pool',\n",
    " '6-17': 'tourist attraction', '1-2-gc': 'golf course', '1-5-gc': 'lookout',\n",
    " '1-7-gc': 'park', '1-8-gc': 'picnic area', '1-12-gc': 'sports field', '1-13-gc': 'sports field'}\n",
    "\n",
    "SS_NSW.replace({'fclass': SS_names},inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "fa0b7eea",
   "metadata": {},
   "outputs": [],
   "source": [
    "employment_centrs = gpd.read_file(folder +\n",
    "    \"Data\\\\Colouring\\\\Centroids employment MBs.gpkg\").to_crs(proj_crs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "636647db",
   "metadata": {},
   "source": [
    "Convert polygonal datasets to points and any multipart datasets to single part."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "763e8027",
   "metadata": {},
   "outputs": [],
   "source": [
    "osm_pois_2 = single_points(osm_poi_areas)\n",
    "osm_transport_2 = single_points(osm_transport_areas)\n",
    "osm_pow_2 = single_points(osm_pow_areas)\n",
    "osm_natural_2 = single_points(osm_natural_areas)\n",
    "\n",
    "osm_df = pd.concat([osm_poi_points, osm_pois_2, osm_transport_points, \n",
    "                    osm_transport_2, osm_pow_points, osm_pow_2, osm_natural_2]).to_crs(proj_crs)\n",
    "\n",
    "osm_df = gpd.clip(osm_df, Greater_Sydney)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c52c0bd3",
   "metadata": {},
   "source": [
    "### Residential population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "ce80894d",
   "metadata": {},
   "outputs": [],
   "source": [
    "meshblocks = pd.read_csv(''.join(folder + \"Data\\\\ABS Data\\\\2016 census mesh block counts.csv\"))\n",
    "mb_shapes = gpd.read_file(''.join(folder + \"Data\\\\ABS Data\\\\2016_NSW_MBs\\\\MB_2016_NSW.shp\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "4ca48902",
   "metadata": {},
   "outputs": [],
   "source": [
    "mb_shapes['MB_CODE16'] = mb_shapes['MB_CODE16'].astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "6b842348",
   "metadata": {},
   "outputs": [],
   "source": [
    "pop_mbs = mb_shapes.join(meshblocks.set_index('MB_CODE_2016'), on='MB_CODE16', how='inner', rsuffix='_2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "ae2c31d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "pop_mbs['geometry'] = pop_mbs['geometry'].to_crs(proj_crs).centroid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "dd28dc80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MB_CODE16</th>\n",
       "      <th>MB_CAT16</th>\n",
       "      <th>SA1_MAIN16</th>\n",
       "      <th>SA1_7DIG16</th>\n",
       "      <th>SA2_MAIN16</th>\n",
       "      <th>SA2_5DIG16</th>\n",
       "      <th>SA2_NAME16</th>\n",
       "      <th>SA3_CODE16</th>\n",
       "      <th>SA3_NAME16</th>\n",
       "      <th>SA4_CODE16</th>\n",
       "      <th>...</th>\n",
       "      <th>GCC_NAME16</th>\n",
       "      <th>STE_CODE16</th>\n",
       "      <th>STE_NAME16</th>\n",
       "      <th>AREASQKM16</th>\n",
       "      <th>geometry</th>\n",
       "      <th>MB_CATEGORY_NAME_2016</th>\n",
       "      <th>AREA_ALBERS_SQKM</th>\n",
       "      <th>Dwelling</th>\n",
       "      <th>Person</th>\n",
       "      <th>State</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10000010000</td>\n",
       "      <td>Residential</td>\n",
       "      <td>10901117207</td>\n",
       "      <td>1117207</td>\n",
       "      <td>109011172</td>\n",
       "      <td>11172</td>\n",
       "      <td>Albury - East</td>\n",
       "      <td>10901</td>\n",
       "      <td>Albury</td>\n",
       "      <td>109</td>\n",
       "      <td>...</td>\n",
       "      <td>Rest of NSW</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>0.0209</td>\n",
       "      <td>POINT (-46955.367 5989803.116)</td>\n",
       "      <td>Residential</td>\n",
       "      <td>0.0209</td>\n",
       "      <td>42.0</td>\n",
       "      <td>69</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10000022000</td>\n",
       "      <td>Commercial</td>\n",
       "      <td>10901117621</td>\n",
       "      <td>1117621</td>\n",
       "      <td>109011176</td>\n",
       "      <td>11176</td>\n",
       "      <td>Lavington</td>\n",
       "      <td>10901</td>\n",
       "      <td>Albury</td>\n",
       "      <td>109</td>\n",
       "      <td>...</td>\n",
       "      <td>Rest of NSW</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>0.0388</td>\n",
       "      <td>POINT (-47029.463 5993579.858)</td>\n",
       "      <td>Commercial</td>\n",
       "      <td>0.0388</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10000023000</td>\n",
       "      <td>Commercial</td>\n",
       "      <td>10901117621</td>\n",
       "      <td>1117621</td>\n",
       "      <td>109011176</td>\n",
       "      <td>11176</td>\n",
       "      <td>Lavington</td>\n",
       "      <td>10901</td>\n",
       "      <td>Albury</td>\n",
       "      <td>109</td>\n",
       "      <td>...</td>\n",
       "      <td>Rest of NSW</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>0.0254</td>\n",
       "      <td>POINT (-46832.272 5993297.664)</td>\n",
       "      <td>Commercial</td>\n",
       "      <td>0.0254</td>\n",
       "      <td>4.0</td>\n",
       "      <td>11</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>10000024000</td>\n",
       "      <td>Residential</td>\n",
       "      <td>10901117613</td>\n",
       "      <td>1117613</td>\n",
       "      <td>109011176</td>\n",
       "      <td>11176</td>\n",
       "      <td>Lavington</td>\n",
       "      <td>10901</td>\n",
       "      <td>Albury</td>\n",
       "      <td>109</td>\n",
       "      <td>...</td>\n",
       "      <td>Rest of NSW</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>0.0376</td>\n",
       "      <td>POINT (-46909.117 5993624.250)</td>\n",
       "      <td>Residential</td>\n",
       "      <td>0.0376</td>\n",
       "      <td>17.0</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10000040000</td>\n",
       "      <td>Residential</td>\n",
       "      <td>10901117613</td>\n",
       "      <td>1117613</td>\n",
       "      <td>109011176</td>\n",
       "      <td>11176</td>\n",
       "      <td>Lavington</td>\n",
       "      <td>10901</td>\n",
       "      <td>Albury</td>\n",
       "      <td>109</td>\n",
       "      <td>...</td>\n",
       "      <td>Rest of NSW</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>0.0379</td>\n",
       "      <td>POINT (-46968.073 5994142.338)</td>\n",
       "      <td>Residential</td>\n",
       "      <td>0.0379</td>\n",
       "      <td>36.0</td>\n",
       "      <td>65</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109865</th>\n",
       "      <td>11210050000</td>\n",
       "      <td>Primary Production</td>\n",
       "      <td>10901117516</td>\n",
       "      <td>1117516</td>\n",
       "      <td>109011175</td>\n",
       "      <td>11175</td>\n",
       "      <td>Albury Region</td>\n",
       "      <td>10901</td>\n",
       "      <td>Albury</td>\n",
       "      <td>109</td>\n",
       "      <td>...</td>\n",
       "      <td>Rest of NSW</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>36.6078</td>\n",
       "      <td>POINT (-50567.400 6011637.509)</td>\n",
       "      <td>Primary Production</td>\n",
       "      <td>36.6078</td>\n",
       "      <td>47.0</td>\n",
       "      <td>127</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109866</th>\n",
       "      <td>11210060000</td>\n",
       "      <td>Primary Production</td>\n",
       "      <td>10401108225</td>\n",
       "      <td>1108225</td>\n",
       "      <td>104011082</td>\n",
       "      <td>11082</td>\n",
       "      <td>Maclean - Yamba - Iluka</td>\n",
       "      <td>10401</td>\n",
       "      <td>Clarence Valley</td>\n",
       "      <td>104</td>\n",
       "      <td>...</td>\n",
       "      <td>Rest of NSW</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>8.6795</td>\n",
       "      <td>POINT (524714.130 6749943.340)</td>\n",
       "      <td>Primary Production</td>\n",
       "      <td>8.6795</td>\n",
       "      <td>22.0</td>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109867</th>\n",
       "      <td>11210070000</td>\n",
       "      <td>Primary Production</td>\n",
       "      <td>10804116622</td>\n",
       "      <td>1116622</td>\n",
       "      <td>108041166</td>\n",
       "      <td>11166</td>\n",
       "      <td>Wauchope</td>\n",
       "      <td>10804</td>\n",
       "      <td>Port Macquarie</td>\n",
       "      <td>108</td>\n",
       "      <td>...</td>\n",
       "      <td>Rest of NSW</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>4.0096</td>\n",
       "      <td>POINT (480472.079 6522046.096)</td>\n",
       "      <td>Primary Production</td>\n",
       "      <td>4.0096</td>\n",
       "      <td>61.0</td>\n",
       "      <td>151</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109868</th>\n",
       "      <td>11210090000</td>\n",
       "      <td>Residential</td>\n",
       "      <td>11602131233</td>\n",
       "      <td>1131233</td>\n",
       "      <td>116021312</td>\n",
       "      <td>11312</td>\n",
       "      <td>Riverstone - Marsden Park</td>\n",
       "      <td>11602</td>\n",
       "      <td>Blacktown - North</td>\n",
       "      <td>116</td>\n",
       "      <td>...</td>\n",
       "      <td>Greater Sydney</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>0.0735</td>\n",
       "      <td>POINT (301477.938 6269686.839)</td>\n",
       "      <td>Residential</td>\n",
       "      <td>0.0735</td>\n",
       "      <td>9.0</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109869</th>\n",
       "      <td>11210101000</td>\n",
       "      <td>Primary Production</td>\n",
       "      <td>12301143315</td>\n",
       "      <td>1143315</td>\n",
       "      <td>123011433</td>\n",
       "      <td>11433</td>\n",
       "      <td>Camden - Ellis Lane</td>\n",
       "      <td>12301</td>\n",
       "      <td>Camden</td>\n",
       "      <td>123</td>\n",
       "      <td>...</td>\n",
       "      <td>Greater Sydney</td>\n",
       "      <td>1</td>\n",
       "      <td>New South Wales</td>\n",
       "      <td>1.2352</td>\n",
       "      <td>POINT (287351.253 6230131.242)</td>\n",
       "      <td>Primary Production</td>\n",
       "      <td>1.2352</td>\n",
       "      <td>3.0</td>\n",
       "      <td>16</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>84148 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          MB_CODE16            MB_CAT16   SA1_MAIN16 SA1_7DIG16 SA2_MAIN16  \\\n",
       "1       10000010000         Residential  10901117207    1117207  109011172   \n",
       "3       10000022000          Commercial  10901117621    1117621  109011176   \n",
       "4       10000023000          Commercial  10901117621    1117621  109011176   \n",
       "5       10000024000         Residential  10901117613    1117613  109011176   \n",
       "6       10000040000         Residential  10901117613    1117613  109011176   \n",
       "...             ...                 ...          ...        ...        ...   \n",
       "109865  11210050000  Primary Production  10901117516    1117516  109011175   \n",
       "109866  11210060000  Primary Production  10401108225    1108225  104011082   \n",
       "109867  11210070000  Primary Production  10804116622    1116622  108041166   \n",
       "109868  11210090000         Residential  11602131233    1131233  116021312   \n",
       "109869  11210101000  Primary Production  12301143315    1143315  123011433   \n",
       "\n",
       "       SA2_5DIG16                 SA2_NAME16 SA3_CODE16         SA3_NAME16  \\\n",
       "1           11172              Albury - East      10901             Albury   \n",
       "3           11176                  Lavington      10901             Albury   \n",
       "4           11176                  Lavington      10901             Albury   \n",
       "5           11176                  Lavington      10901             Albury   \n",
       "6           11176                  Lavington      10901             Albury   \n",
       "...           ...                        ...        ...                ...   \n",
       "109865      11175              Albury Region      10901             Albury   \n",
       "109866      11082    Maclean - Yamba - Iluka      10401    Clarence Valley   \n",
       "109867      11166                   Wauchope      10804     Port Macquarie   \n",
       "109868      11312  Riverstone - Marsden Park      11602  Blacktown - North   \n",
       "109869      11433        Camden - Ellis Lane      12301             Camden   \n",
       "\n",
       "       SA4_CODE16  ...      GCC_NAME16 STE_CODE16       STE_NAME16 AREASQKM16  \\\n",
       "1             109  ...     Rest of NSW          1  New South Wales     0.0209   \n",
       "3             109  ...     Rest of NSW          1  New South Wales     0.0388   \n",
       "4             109  ...     Rest of NSW          1  New South Wales     0.0254   \n",
       "5             109  ...     Rest of NSW          1  New South Wales     0.0376   \n",
       "6             109  ...     Rest of NSW          1  New South Wales     0.0379   \n",
       "...           ...  ...             ...        ...              ...        ...   \n",
       "109865        109  ...     Rest of NSW          1  New South Wales    36.6078   \n",
       "109866        104  ...     Rest of NSW          1  New South Wales     8.6795   \n",
       "109867        108  ...     Rest of NSW          1  New South Wales     4.0096   \n",
       "109868        116  ...  Greater Sydney          1  New South Wales     0.0735   \n",
       "109869        123  ...  Greater Sydney          1  New South Wales     1.2352   \n",
       "\n",
       "                              geometry  MB_CATEGORY_NAME_2016  \\\n",
       "1       POINT (-46955.367 5989803.116)            Residential   \n",
       "3       POINT (-47029.463 5993579.858)             Commercial   \n",
       "4       POINT (-46832.272 5993297.664)             Commercial   \n",
       "5       POINT (-46909.117 5993624.250)            Residential   \n",
       "6       POINT (-46968.073 5994142.338)            Residential   \n",
       "...                                ...                    ...   \n",
       "109865  POINT (-50567.400 6011637.509)     Primary Production   \n",
       "109866  POINT (524714.130 6749943.340)     Primary Production   \n",
       "109867  POINT (480472.079 6522046.096)     Primary Production   \n",
       "109868  POINT (301477.938 6269686.839)            Residential   \n",
       "109869  POINT (287351.253 6230131.242)     Primary Production   \n",
       "\n",
       "       AREA_ALBERS_SQKM Dwelling  Person  State  \n",
       "1                0.0209     42.0      69      1  \n",
       "3                0.0388      3.0       5      1  \n",
       "4                0.0254      4.0      11      1  \n",
       "5                0.0376     17.0      22      1  \n",
       "6                0.0379     36.0      65      1  \n",
       "...                 ...      ...     ...    ...  \n",
       "109865          36.6078     47.0     127      1  \n",
       "109866           8.6795     22.0      62      1  \n",
       "109867           4.0096     61.0     151      1  \n",
       "109868           0.0735      9.0      10      1  \n",
       "109869           1.2352      3.0      16      1  \n",
       "\n",
       "[84148 rows x 22 columns]"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pop_mbs[(pop_mbs['Person'] > 0) & ~(pop_mbs['geometry'].isnull())]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "4f3fbc8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "pop_pois = pop_mbs[(pop_mbs['Person'] > 0) & ~(pop_mbs['geometry'].isnull())][['MB_CODE16', 'MB_CATEGORY_NAME_2016', 'AREA_ALBERS_SQKM', 'Person','geometry']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "3c210140",
   "metadata": {},
   "outputs": [],
   "source": [
    "pop_pois['fclass'] = 'residential'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5328c53c",
   "metadata": {},
   "source": [
    " 10,000 for population? Micropolitan size?\n",
    " For jobs: Colin Clark rports that cities need 100,000-200,000 in order to provide an adequate range of commercial services. 200-500k to support broadly based manufacturing activity."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5588632",
   "metadata": {},
   "source": [
    "Need to remove potential overlap between different data sources (and inside some data sources). For this dataset it's around 30% because there is overlap of public transport stops between OSM and TfNSW, and overlap of things like post offices between OSM and SSNSW. Then take this combined POI set and clip it to the study area: should be the same area as is covered by the network. This is important otherwise points outside the network may be erroneously linked to the network."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96944dbd",
   "metadata": {},
   "source": [
    "### Categorise and weight POIs"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f38e444",
   "metadata": {},
   "source": [
    "Categorise POI data - change classes depending on your analysis and your data sources."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "2d7552c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "poi_weights = {\n",
    "    \"employment\": 29,\n",
    "    \"education\": 13,\n",
    "    \"daily needs\": 13.8,\n",
    "    \"other goods\": 5.8,\n",
    "    \"services\": 1.5,\n",
    "    \"medical\": 3.6,\n",
    "    \"errands\": 1.5,\n",
    "    \"visiting\": 9.4,\n",
    "    \"cultural\": 1.5,\n",
    "    \"events\": 1.5,\n",
    "    \"sports\": 4.4,\n",
    "    \"restaurants\": 3.6,\n",
    "    \"day trip\": 0.7,\n",
    "    \"walk/jog/ride\": 5.1,\n",
    "    \"walk dog\": 2.9,\n",
    "    \"religious\": 1.5,\n",
    "    \"accompany children\": 1.5,\n",
    "}\n",
    "\n",
    "poi_numbers = {\n",
    "    \"employment\": 100,\n",
    "    \"education\": 5,\n",
    "    \"daily needs\": 5,\n",
    "    \"other goods\": 5,\n",
    "    \"services\": 5,\n",
    "    \"medical\": 5,\n",
    "    \"errands\": 5,\n",
    "    \"visiting\": 5,\n",
    "    \"cultural\": 5,\n",
    "    \"events\": 5,\n",
    "    \"sports\": 5,\n",
    "    \"restaurants\": 5,\n",
    "    \"day trip\": 5,\n",
    "    \"walk/jog/ride\": 5,\n",
    "    \"walk dog\": 5,\n",
    "    \"religious\": 5,\n",
    "    \"accompany children\": 5,\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "b7f4b63d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total:  100.3\n"
     ]
    }
   ],
   "source": [
    "#category_sums = {k: sum(v) for k, v in poi_weights.items()}\n",
    "#print(category_sums)\n",
    "total = sum(poi_weights.values())\n",
    "print(\"total: \", total)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1dbebe2",
   "metadata": {},
   "source": [
    "The purpose of this section now is just to align the different sources of information so that their tags are in the same column, eg 'category'. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "654f33ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tags present in the dataset but not categorised:\n",
      "['4-6' '2-24' '5-9' '2-0' '5-10' '2-8' '2-12' '3-0' '2-4' '6-3' '2-17'\n",
      " '2-21' '2-20' '2-9' '5-8' '4-7' '4-4' '4-8' '2-23' '1-0' '3-1' '2-19'\n",
      " '2-5' '4-0' '2-6' '2-7' '2-1' '5-1' '4-1' '2-10' '2-15' '5-5' '5-11'\n",
      " '5-2' '4-2' '4-3' '5-3' '4-9' '5-6' '3-4' '5-7' '6-0' '5-0' '6-2'\n",
      " '4-11-gc' '12-0-gc' '8-0-gc' '4-12-gc' '1-4-gc' '4-7-gc' '7-0-gc'\n",
      " '4-6-gc' '4-2-gc' '8-2-gc' '6-5-gc' '1-14-gc' '12-1-gc' '1-1-gc' '7-2-gc'\n",
      " '7-1-gc' '1-11-gc' '4-9-gc' '4-3-gc' '5-0-gc' '5-1-gc' '4-0-gc' '4-4-gc'\n",
      " '6-2-gc' '2-0-gc' '4-8-gc' '2-1-gc' '8-1-gc' '1-3-gc' '3-1-gc' '6-4-gc'\n",
      " '7-3-gc' '4-5-gc' '2-2-gc' '6-7-gc' '7-4-gc' '6-8-gc' '6-6-gc' '6-3-gc'\n",
      " '2-3-gc' '1-10-gc' '4-13-gc' '1-0-gc' '7-5-gc' '9-0-gc' '9-1-gc' '6-1-gc'\n",
      " '3-0-gc' '6-0-gc']\n",
      "Tags present in the dataset but not categorised:\n",
      "['toilet' 'drinking_water' 'camp_site' 'shelter' 'waste_basket'\n",
      " 'telephone' 'bench' 'railway_station' 'bus_stop' 'fire_station'\n",
      " 'tourist_info' 'police' 'motel' 'memorial' 'caravan_site' 'water_tower'\n",
      " 'bus_station' 'town_hall' 'wastewater_plant' 'comms_tower' 'tower'\n",
      " 'guesthouse' 'cliff' 'observation_tower' 'prison' 'vending_any'\n",
      " 'monument' 'recycling_paper' 'vending_parking' 'fountain' 'car_wash'\n",
      " 'hotel' 'camera_surveillance' 'recycling' 'embassy' 'taxi' 'car_rental'\n",
      " 'public_building' 'water_works' 'tram_stop' 'hostel' 'recycling_clothes'\n",
      " 'vending_machine' 'recycling_glass' 'bicycle_rental' 'car_sharing' 'fort'\n",
      " 'lighthouse' 'hunting_stand' 'tree' 'ferry_terminal' 'chalet'\n",
      " 'railway_halt' 'water_well' 'windmill' 'battlefield' 'water_mill']\n"
     ]
    }
   ],
   "source": [
    "SS_categories = {'other goods':[\"shopping centre\"], \n",
    "                 'errands':[\"post office\",], \n",
    "                 'medical':[\"health centre\"],\n",
    "                 'education':[\"school\", \"university\", \"childcare\"],\n",
    "                 'visiting' : [\"picnic area\"],\n",
    "                 'religious':[\"place of worship\", ],\n",
    "                 'cultural':[\"art gallery\", \"library\", \"museum\", \"outdoor theater\",],\n",
    "                 'sports':[\"sports centre\", \"sports field\", \"swimming pool\",\n",
    "                         \"golf course\", ],\n",
    "                 'day trip' : [\"tourist attraction\", \"zoo\", \"lookout\",],\n",
    "                 'walk/jog/ride' : ['park',],}\n",
    "\n",
    "SS_categorised = categorise_pois(SS_NSW, SS_categories, \n",
    "                                 old_column='fclass')\n",
    "\n",
    "osm_categories = {'daily needs' : ['supermarket', 'greengrocer','butcher','convenience',\n",
    "                                   'kiosk', 'beverages', 'alcohol', 'bakery', ],\n",
    "                  'other goods' : ['mall', 'bicycle_shop', 'clothes', 'department_store', \n",
    "                                   'doityourself', 'beauty_shop', 'outdoor_shop', \n",
    "                                   'stationery', 'bookshop', 'gift_shop', 'newsagent', \n",
    "                                   'car_dealership', 'furniture_shop', 'sports_shop',\n",
    "                                   'garden_centre', 'computer_shop', 'shoe_shop', 'florist', \n",
    "                                   'video_shop', 'toy_shop', 'mobile_phone_shop', 'jeweller'],\n",
    "                  'services': ['hairdresser', 'optician', 'travel_agent','laundry', 'veterinary', ],                 \n",
    "                  'medical': ['chemist', 'pharmacy','doctors', 'dentist','hospital',],                  \n",
    "                  'errands' : ['post_box', 'post_office', 'bank', 'atm','courthouse' ], \n",
    "                  'education' : ['college', 'school', 'kindergarten', 'university'],\n",
    "                  'visiting' : ['picnic_site', 'nursing_home'],\n",
    "                  'cultural' : [ 'arts_centre', 'theatre', 'artwork','library',\n",
    "                                'archaeological', 'cinema', 'museum', 'ruins',],\n",
    "                  'events' : ['stadium',],\n",
    "                  'sports' : ['ice_rink','pitch', 'swimming_pool', 'sports_centre', \n",
    "                             'golf_course', 'track',],\n",
    "                  'further education' : ['community_centre', 'library',],\n",
    "                  'restaurants' : ['restaurant', 'pub', 'cafe', 'fast_food', 'bar',  \n",
    "                                   'food_court', 'nightclub', 'biergarten',],\n",
    "                  'day trip' : ['attraction', 'zoo', 'castle', \n",
    "                                'theme_park',],\n",
    "                  'walk/jog/ride' : ['park', 'viewpoint', 'beach'],\n",
    "                  'walk dog' : ['dog_park', 'park',],\n",
    "                  'religous' : ['graveyard', 'christian_anglican', 'muslim',\n",
    "                                'christian', 'christian_catholic', 'christian_protestant',\n",
    "                                'christian_lutheran', 'hindu', 'christian_evangelical',\n",
    "                                'christian_methodist', 'buddhist', 'sikh', 'christian_orthodox', 'jewish',\n",
    "                                'muslim_sunni', 'taoist', 'muslim_shia'],\n",
    "                  'hobby' : [],\n",
    "                  'accompany children' : ['playground', 'library',],\n",
    "                    }\n",
    "\n",
    "osm_categorised = categorise_pois(osm_df, osm_categories, \n",
    "                                  old_column='fclass')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "ae555430",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tags present in the dataset but not categorised:\n",
      "['toilet' 'drinking_water' 'camp_site' 'shelter' 'picnic_site'\n",
      " 'waste_basket' 'telephone' 'bench' 'railway_station' 'bus_stop'\n",
      " 'fire_station' 'tourist_info' 'police' 'motel' 'memorial' 'caravan_site'\n",
      " 'water_tower' 'bus_station' 'town_hall' 'wastewater_plant' 'comms_tower'\n",
      " 'tower' 'nursing_home' 'guesthouse' 'cliff' 'observation_tower' 'prison'\n",
      " 'vending_any' 'monument' 'recycling_paper' 'vending_parking' 'fountain'\n",
      " 'car_wash' 'hotel' 'camera_surveillance' 'recycling' 'embassy' 'taxi'\n",
      " 'car_rental' 'public_building' 'water_works' 'tram_stop' 'hostel'\n",
      " 'recycling_clothes' 'vending_machine' 'recycling_glass' 'bicycle_rental'\n",
      " 'car_sharing' 'fort' 'lighthouse' 'hunting_stand' 'tree' 'ferry_terminal'\n",
      " 'chalet' 'railway_halt' 'water_well' 'windmill' 'battlefield'\n",
      " 'water_mill']\n",
      "Tags present in the dataset but not categorised:\n",
      "['4-6' '2-24' '5-9' '2-0' '5-10' '2-8' '2-12' '3-0' '2-4' '6-3' '2-17'\n",
      " '2-21' '2-20' '2-9' '5-8' '4-7' '4-4' '4-8' '2-23' '1-0' '3-1' '2-19'\n",
      " '2-5' '4-0' '2-6' '2-7' '2-1' '5-1' '4-1' '2-10' '2-15' '5-5' '5-11'\n",
      " '5-2' '4-2' '4-3' '5-3' '4-9' '5-6' '3-4' '5-7' '6-0' '5-0' '6-2'\n",
      " '4-11-gc' 'picnic area' '12-0-gc' '8-0-gc' '4-12-gc' '1-4-gc' '4-7-gc'\n",
      " '7-0-gc' '4-6-gc' '4-2-gc' '8-2-gc' '6-5-gc' '1-14-gc' '12-1-gc' '1-1-gc'\n",
      " '7-2-gc' '7-1-gc' '1-11-gc' '4-9-gc' '4-3-gc' '5-0-gc' '5-1-gc' '4-0-gc'\n",
      " '4-4-gc' '6-2-gc' '2-0-gc' '4-8-gc' '2-1-gc' '8-1-gc' '1-3-gc' '3-1-gc'\n",
      " '6-4-gc' '7-3-gc' '4-5-gc' '2-2-gc' '6-7-gc' '7-4-gc' '6-8-gc' '6-6-gc'\n",
      " '6-3-gc' '2-3-gc' '1-10-gc' '4-13-gc' '1-0-gc' '7-5-gc' '9-0-gc' '9-1-gc'\n",
      " '6-1-gc' '3-0-gc' '6-0-gc']\n",
      "Tags present in the dataset but not categorised:\n",
      "[]\n"
     ]
    }
   ],
   "source": [
    "poi_categories = {'employment':[],\n",
    "                  'daily needs' : ['supermarket', 'greengrocer','butcher','convenience',\n",
    "                                   'kiosk', 'beverages', 'alcohol', 'bakery', ],\n",
    "                  'other goods' : [\"shopping centre\", 'mall', 'bicycle_shop', 'clothes', 'department_store', \n",
    "                                   'doityourself', 'beauty_shop', 'outdoor_shop', \n",
    "                                   'stationery', 'bookshop', 'gift_shop', 'newsagent', \n",
    "                                   'car_dealership', 'furniture_shop', 'sports_shop',\n",
    "                                   'garden_centre', 'computer_shop', 'shoe_shop', 'florist', \n",
    "                                   'video_shop', 'toy_shop', 'mobile_phone_shop', 'jeweller'],\n",
    "                  'services': ['hairdresser', 'optician', 'travel_agent','laundry', 'veterinary', ],                 \n",
    "                  'medical': [\"health centre\",'chemist', 'pharmacy','doctors', 'dentist','hospital',],                  \n",
    "                  'errands' : [\"post office\",'post_box', 'post_office', 'bank', 'atm','courthouse' ], \n",
    "                  'education' : [\"childcare\", 'college', 'school', 'kindergarten', 'university'],\n",
    "                  'visiting' : ['residential'],\n",
    "                  'cultural' : [\"art gallery\", \"outdoor theater\", 'arts_centre', 'theatre', 'artwork',\n",
    "                                'library','archaeological', 'cinema', 'museum', 'ruins',],\n",
    "                  'events' : ['stadium',],\n",
    "                  'sports' : [\"sports centre\", \"sports field\", \"swimming pool\", \"golf course\", \n",
    "                              'ice_rink','pitch', 'swimming_pool', 'sports_centre', \n",
    "                              'golf_course', 'track',],\n",
    "                  'further education' : ['community_centre', 'library',],\n",
    "                  'restaurants' : ['restaurant', 'pub', 'cafe', 'fast_food', 'bar',  \n",
    "                                   'food_court', 'nightclub', 'biergarten',],\n",
    "                  'day trip' : [\"tourist attraction\", \"lookout\", 'attraction', 'zoo', 'castle', \n",
    "                                'theme_park',],\n",
    "                  'walk/jog/ride' : ['park', 'viewpoint', 'beach'],\n",
    "                  'walk dog' : ['dog_park', 'park',],\n",
    "                  'religious' : [\"place of worship\", 'graveyard', 'christian_anglican', 'muslim',\n",
    "                                'christian', 'christian_catholic', 'christian_protestant',\n",
    "                                'christian_lutheran', 'hindu', 'christian_evangelical',\n",
    "                                'christian_methodist', 'buddhist', 'sikh', 'christian_orthodox', 'jewish',\n",
    "                                'muslim_sunni', 'taoist', 'muslim_shia'],\n",
    "                  'hobby' : [],\n",
    "                  'accompany children' : ['playground', 'library',],\n",
    "                    }\n",
    "\n",
    "osm_categorised = categorise_pois(osm_df, poi_categories, \n",
    "                                  old_column='fclass')\n",
    "SS_categorised = categorise_pois(SS_NSW, poi_categories, \n",
    "                                 old_column='fclass')\n",
    "pop_categorised = categorise_pois(pop_pois, poi_categories, \n",
    "                                 old_column='fclass')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "a26286de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removed 1.91% duplicate points from dataframes\n"
     ]
    }
   ],
   "source": [
    "pois = remove_duplicate_pois([osm_categorised, SS_categorised, pop_categorised], buffer=10)\n",
    "\n",
    "pois = gpd.clip(pois, Greater_Sydney)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94b0c568",
   "metadata": {},
   "source": [
    "Choose walk index weightings, and output the sums of each category and the total to check. The walk index will be out of 100 regardless of this sum, but it is important to note that eg. shopping is only '10% of the walk index' if shopping is 10 out of 100."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "5fc3fcb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "47290"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "no_opps = pois.groupby(['category']).size()\n",
    "no_opps['residential']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41834e86",
   "metadata": {},
   "source": [
    "### Import network"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdd12d7d",
   "metadata": {},
   "source": [
    "In this case the network is already in the same projected CRS as everything else but I have left in the transformation to be clear."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b32c64f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\z3258367\\Anaconda3\\envs\\ox\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3331: DtypeWarning: Columns (2,4,5,7,9,13,14,19,21) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n",
      "C:\\Users\\z3258367\\Anaconda3\\envs\\ox\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3331: DtypeWarning: Columns (6,11,12) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'str'>\n",
      "<class 'str'>\n"
     ]
    }
   ],
   "source": [
    "# reading directly with geopandas.read_file crashes on my computer so I read into pandas then convert to gdf instead\n",
    "edges_df = pd.read_csv(folder + \"Walkability//Other Cities//Colouring data & results//Sydney data//Data//colouring_edges_150322.csv\")\n",
    "nodes_df = pd.read_csv(folder + \"Walkability//Other Cities//Colouring data & results//Sydney data//Data//colouring_nodes_150322.csv\")\n",
    "edges = gpd.GeoDataFrame(edges_df, \n",
    "                         geometry=gpd.GeoSeries.from_wkt(edges_df['geometry'])).set_crs(proj_crs)\n",
    "nodes = gpd.GeoDataFrame(nodes_df, \n",
    "                         geometry=gpd.GeoSeries.from_wkt(nodes_df['geometry'])).set_crs(proj_crs)\n",
    "edges = edges.to_crs(proj_crs)\n",
    "nodes = nodes.to_crs(proj_crs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "792785b1",
   "metadata": {},
   "source": [
    "Pandana expects edges to have a two item index based on the same IDs as the node index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b6eafa0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "nodes.set_index('connect_id',inplace=True)\n",
    "\n",
    "edges['from_idx'] = edges['from']\n",
    "edges['to_idx'] = edges['to']\n",
    "edges= edges.set_index(['from_idx', 'to_idx'])\n",
    "edges.index.names= ['from_idx','to_idx']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f02dfca0",
   "metadata": {},
   "source": [
    "## Pandana network creation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "72c0e94d",
   "metadata": {},
   "outputs": [],
   "source": [
    "distance_network = pdna.Network(nodes['x'], nodes['y'],\n",
    "                                   edges['from'], edges['to'], \n",
    "                                   edges[['length']])\n",
    "\n",
    "maximum_dist = 2400"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e240d8fb",
   "metadata": {},
   "source": [
    "Get distributions of number of reachable destinations in each category across the network, to check whether the max destinations we use is reasonable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "8a7bd4cb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "employment 0\n",
      "education 3619\n",
      "shopping 4171\n",
      "errands 4556\n",
      "recreation 28905\n"
     ]
    }
   ],
   "source": [
    "for cat in list(poi_numbers.keys()):\n",
    "    print(cat, len(pois[pois.category == cat]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "62a7e093",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished category: daily needs\n",
      "Finished category: other goods\n",
      "Finished category: services\n",
      "Finished category: medical\n",
      "Finished category: errands\n",
      "Finished category: education\n",
      "Finished category: visiting\n",
      "Finished category: cultural\n",
      "Finished category: events\n",
      "Finished category: sports\n",
      "Finished category: further education\n",
      "Finished category: restaurants\n",
      "Finished category: day trip\n",
      "Finished category: walk/jog/ride\n",
      "Finished category: walk dog\n",
      "Finished category: religous\n",
      "Category hobby is empty\n",
      "Finished category: accompany children\n"
     ]
    }
   ],
   "source": [
    "counts = primal(distance_network, pois, 2400, 20, list(poi_categories.keys()), poi_categories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "00a0479f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Finished category: sports\n"
     ]
    }
   ],
   "source": [
    "count_sports = primal(distance_network, pois, 2400, 44, ['sports'], poi_categories)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "598292df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sports</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.34282e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>24.9835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>15.4477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            sports\n",
       "count  1.34282e+06\n",
       "mean       24.9835\n",
       "std        15.4477\n",
       "min              0\n",
       "25%             11\n",
       "50%             25\n",
       "75%             43\n",
       "max             44"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count_sports[nodes['connect_type'] == 'poi'].describe(include=int).applymap(lambda x: format(x, 'g'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "5cbca5f9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>daily needs</th>\n",
       "      <th>other goods</th>\n",
       "      <th>services</th>\n",
       "      <th>medical</th>\n",
       "      <th>errands</th>\n",
       "      <th>education</th>\n",
       "      <th>visiting</th>\n",
       "      <th>cultural</th>\n",
       "      <th>events</th>\n",
       "      <th>sports</th>\n",
       "      <th>further education</th>\n",
       "      <th>restaurants</th>\n",
       "      <th>day trip</th>\n",
       "      <th>walk/jog/ride</th>\n",
       "      <th>walk dog</th>\n",
       "      <th>religous</th>\n",
       "      <th>hobby</th>\n",
       "      <th>accompany children</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "      <td>1.34282e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>6.8179</td>\n",
       "      <td>6.61812</td>\n",
       "      <td>2.55015</td>\n",
       "      <td>4.26634</td>\n",
       "      <td>7.19327</td>\n",
       "      <td>11.7852</td>\n",
       "      <td>1.33729</td>\n",
       "      <td>2.63201</td>\n",
       "      <td>0.143791</td>\n",
       "      <td>15.4127</td>\n",
       "      <td>2.03911</td>\n",
       "      <td>9.4335</td>\n",
       "      <td>0.744661</td>\n",
       "      <td>17.1327</td>\n",
       "      <td>17.0072</td>\n",
       "      <td>10.0104</td>\n",
       "      <td>0</td>\n",
       "      <td>10.7604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.54522</td>\n",
       "      <td>6.87269</td>\n",
       "      <td>4.50048</td>\n",
       "      <td>5.18458</td>\n",
       "      <td>6.61816</td>\n",
       "      <td>7.13351</td>\n",
       "      <td>2.34306</td>\n",
       "      <td>3.98952</td>\n",
       "      <td>0.54348</td>\n",
       "      <td>6.83296</td>\n",
       "      <td>2.31747</td>\n",
       "      <td>7.71429</td>\n",
       "      <td>2.10984</td>\n",
       "      <td>6.05109</td>\n",
       "      <td>6.12777</td>\n",
       "      <td>7.52393</td>\n",
       "      <td>0</td>\n",
       "      <td>6.97438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>10</td>\n",
       "      <td>11</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>14</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       daily needs  other goods     services      medical      errands  \\\n",
       "count  1.34282e+06  1.34282e+06  1.34282e+06  1.34282e+06  1.34282e+06   \n",
       "mean        6.8179      6.61812      2.55015      4.26634      7.19327   \n",
       "std        6.54522      6.87269      4.50048      5.18458      6.61816   \n",
       "min              0            0            0            0            0   \n",
       "25%              2            1            0            0            2   \n",
       "50%              5            4            1            2            5   \n",
       "75%             10           11            3            6           11   \n",
       "max             20           20           20           20           20   \n",
       "\n",
       "         education     visiting     cultural       events       sports  \\\n",
       "count  1.34282e+06  1.34282e+06  1.34282e+06  1.34282e+06  1.34282e+06   \n",
       "mean       11.7852      1.33729      2.63201     0.143791      15.4127   \n",
       "std        7.13351      2.34306      3.98952      0.54348      6.83296   \n",
       "min              0            0            0            0            0   \n",
       "25%              5            0            0            0           11   \n",
       "50%             12            0            1            0           20   \n",
       "75%             20            2            3            0           20   \n",
       "max             20           20           20           14           20   \n",
       "\n",
       "      further education  restaurants     day trip walk/jog/ride     walk dog  \\\n",
       "count       1.34282e+06  1.34282e+06  1.34282e+06   1.34282e+06  1.34282e+06   \n",
       "mean            2.03911       9.4335     0.744661       17.1327      17.0072   \n",
       "std             2.31747      7.71429      2.10984       6.05109      6.12777   \n",
       "min                   0            0            0             0            0   \n",
       "25%                   0            2            0            20           19   \n",
       "50%                   1            8            0            20           20   \n",
       "75%                   3           20            1            20           20   \n",
       "max                  20           20           20            20           20   \n",
       "\n",
       "          religous        hobby accompany children  \n",
       "count  1.34282e+06  1.34282e+06        1.34282e+06  \n",
       "mean       10.0104            0            10.7604  \n",
       "std        7.52393            0            6.97438  \n",
       "min              0            0                  0  \n",
       "25%              3            0                  5  \n",
       "50%              9            0                 11  \n",
       "75%             19            0                 18  \n",
       "max             20            0                 20  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "counts[nodes['connect_type'] == 'poi'].describe(include=int).applymap(lambda x: format(x, 'g'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09754e3b",
   "metadata": {},
   "source": [
    "### Pandana network querying. \n",
    "The 'employment' category is empty because we didn't add the employment points to the POI dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "9c333174",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Category employment is empty\n",
      "Finished category: education\n",
      "Finished category: daily needs\n",
      "Finished category: other goods\n",
      "Finished category: services\n",
      "Finished category: medical\n",
      "Finished category: errands\n",
      "Finished category: visiting\n",
      "Finished category: cultural\n",
      "Finished category: events\n",
      "Finished category: sports\n",
      "Finished category: restaurants\n",
      "Finished category: day trip\n",
      "Finished category: walk/jog/ride\n",
      "Finished category: walk dog\n",
      "Finished category: religious\n",
      "Finished category: accompany children\n"
     ]
    }
   ],
   "source": [
    "results_4 = walk_index(distance_network, pois, poi_categories, poi_weights, poi_numbers, distance=maximum_dist)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "9a0edd2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['x', 'y', 'employment_29', 'education1', 'education2', 'education3',\n",
       "       'education4', 'education5', 'education_13', 'daily needs1',\n",
       "       'daily needs2', 'daily needs3', 'daily needs4', 'daily needs5',\n",
       "       'daily needs_13.8', 'other goods1', 'other goods2', 'other goods3',\n",
       "       'other goods4', 'other goods5', 'other goods_5.8', 'services1',\n",
       "       'services2', 'services3', 'services4', 'services5', 'services_1.5',\n",
       "       'medical1', 'medical2', 'medical3', 'medical4', 'medical5',\n",
       "       'medical_3.6', 'errands1', 'errands2', 'errands3', 'errands4',\n",
       "       'errands5', 'errands_1.5', 'visiting1', 'visiting2', 'visiting3',\n",
       "       'visiting4', 'visiting5', 'visiting_9.4', 'cultural1', 'cultural2',\n",
       "       'cultural3', 'cultural4', 'cultural5', 'cultural_1.5', 'events1',\n",
       "       'events2', 'events3', 'events4', 'events5', 'events_1.5', 'sports1',\n",
       "       'sports2', 'sports3', 'sports4', 'sports5', 'sports_4.4',\n",
       "       'restaurants1', 'restaurants2', 'restaurants3', 'restaurants4',\n",
       "       'restaurants5', 'restaurants_3.6', 'day trip1', 'day trip2',\n",
       "       'day trip3', 'day trip4', 'day trip5', 'day trip_0.7', 'walk/jog/ride1',\n",
       "       'walk/jog/ride2', 'walk/jog/ride3', 'walk/jog/ride4', 'walk/jog/ride5',\n",
       "       'walk/jog/ride_5.1', 'walk dog1', 'walk dog2', 'walk dog3', 'walk dog4',\n",
       "       'walk dog5', 'walk dog_2.9', 'religious1', 'religious2', 'religious3',\n",
       "       'religious4', 'religious5', 'religious_1.5', 'accompany children1',\n",
       "       'accompany children2', 'accompany children3', 'accompany children4',\n",
       "       'accompany children5', 'accompany children_1.5', 'Walk_Index'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_4.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "32634736",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7334091297688162"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(results_4['Walk_Index'])/71"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "681bc346",
   "metadata": {},
   "outputs": [],
   "source": [
    "results_1 = results.copy()\n",
    "for category in poi_weights:\n",
    "    cat_total = poi_weights[category]\n",
    "    cat_name = ''.join((str(category),\"_\",str(cat_total)))\n",
    "    results_1[cat_name] = results_1[cat_name]/poi_numbers[category]\n",
    "    \n",
    "col_list = [''.join((str(category),\"_\",str(poi_weights[category])))\n",
    "            for category in poi_weights]   \n",
    "weights = sum(poi_weights.values())\n",
    "                           \n",
    "results_1['Walk_Index'] = 100/weights*(results_1[col_list].sum(axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "22c6fd2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "poi_numbers_small = {\n",
    "    #\"employment\": 100,\n",
    "    \"education\": 2,\n",
    "    \"shopping\": 2,\n",
    "    \"errands\": 1,\n",
    "    \"recreation\": 35,\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "20e7da7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "results_2 = results_1.copy()\n",
    "for category in poi_numbers_small:\n",
    "    cat_total = poi_weights[category]\n",
    "    cat_name = ''.join((str(category),\"_\",str(cat_total)))\n",
    "    number = poi_numbers_small[category]\n",
    "    \n",
    "    columns = [''.join((str(category),str(i+1)))\n",
    "                for i in range(number)] \n",
    "    \n",
    "    access = results_2[columns]\n",
    "    \n",
    "    results_2[cat_name] = ((access.applymap(access_weight))*\n",
    "                                 poi_weights[category]/poi_numbers_small[category]).sum(axis=1)\n",
    "    \n",
    "    col_list = [''.join((str(category),\"_\",str(poi_weights[category])))\n",
    "                for category in poi_weights]   \n",
    "    weights = sum(poi_weights.values())\n",
    "\n",
    "    results_2['Walk_Index'] = 100/weights*(results_2[col_list].sum(axis=1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "de1a549c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'Walk_Index'}>]], dtype=object)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "results_1.hist('Walk_Index')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "ca017b08",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'Walk_Index'}>]], dtype=object)"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "results_2.hist('Walk_Index')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b75a274f",
   "metadata": {},
   "source": [
    "### Employment"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "933c5d9e",
   "metadata": {},
   "source": [
    "The current approach is to find up to 100 closest employment nodes within the maximum distance. Then look up the number of jobs at each one, apply a distance decay function to each distance, multiply these together, and sum.\n",
    "\n",
    "An alternative approach which would be more convenient would be to use the Pandana 'aggregate' function which aggregates from all nodes within the maximum distance. However, there is limited ability to change the distance decay rate within the aggregation function. It can either be flat (no decay), linear (going to 0 at the max distance), or exponential where beta is set as 1/max distance. For walking I would like a beta of 0.001, but this requires the radius to be 1000m. If the radius is 2400m, beta is only 0.0004. This can be changed in the future if the Pandana function is updated to take a decay parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "db26c1bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y = (employment_centrs['geometry'].x, employment_centrs['geometry'].y)\n",
    "\n",
    "distance_network.set_pois(category='employment', maxdist=maximum_dist, maxitems=100, x_col=x, y_col=y)\n",
    "\n",
    "employment_access = distance_network.nearest_pois(\n",
    "    distance=maximum_dist, category='employment', num_pois=100, include_poi_ids=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe6ad772",
   "metadata": {},
   "source": [
    "The nearest_pois function returns both distances and the IDs of the nearest pois (with include_poi_ids option). The IDs can then be used to retrieve the number of jobs at each point. I found a merge was the fastest way to join this data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dabe01b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "jobcounts = itermerge(employment_access.iloc[:,100:200], employment_centrs['Jobs_count'])\n",
    "\n",
    "results_3['jobs'] = ((employment_access.iloc[:,0:100].applymap(access_weight, distance=maximum_dist))*\n",
    "                                jobcounts.iloc[:,100:200].values\n",
    "                                ).sum(axis=1)\n",
    "\n",
    "weight = 100*poi_weights['employment']/sum(poi_weights.values())\n",
    "\n",
    "results_3['employment'] = weight*results_3['jobs']/max(results_3['jobs'])\n",
    "\n",
    "results_3['Walk_Index'] = results_3['Walk_Index'] + results_3['employment']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15a85be3",
   "metadata": {},
   "source": [
    "### Residential access"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a42ca4a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y = (pois[pois['category'].isin(poi_categories['visiting'])]['geometry'].x, \n",
    "                pois[pois['category'].isin(poi_categories['visiting'])]['geometry'].y)\n",
    "\n",
    "distance_network.set_pois(category='visiting', maxdist=1500, maxitems=300, x_col=x, y_col=y)\n",
    "\n",
    "residential_access = distance_network.nearest_pois(\n",
    "    distance=1500, category='visiting', num_pois=300, include_poi_ids=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57f5cc4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "residential_access[300]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39f06c0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "personcounts = itermerge(residential_access.iloc[:,100:200], pois[pois['category'].isin(poi_categories['visiting'])]['Person'])\n",
    "\n",
    "results_4['persons'] = ((residential_access.iloc[:,0:100].applymap(access_weight, distance=maximum_dist))*\n",
    "                                personcounts.iloc[:,100:200].values\n",
    "                                ).sum(axis=1)\n",
    "\n",
    "weight = 100*poi_weights['visiting']/sum(poi_weights.values())\n",
    "\n",
    "#results_4['visiting'] = weight*results_4['persons']/max(results_4['persons'])\n",
    "\n",
    "#results_4['Walk_Index'] = results_4['Walk_Index'] + results_3['visiting']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5058b4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "total_person = personcounts[nodes['connect_type']=='poi'].iloc[:,100:200].sum(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "166c1971",
   "metadata": {},
   "outputs": [],
   "source": [
    "total_person.describe(percentiles=[.1,.25, .5, .75],include=int).apply(lambda x: format(x, 'g'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1eece544",
   "metadata": {},
   "outputs": [],
   "source": [
    "total_person.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "id": "5c4e0741",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "connect_id\n",
       "1294960    10153.0\n",
       "1294971    10314.0\n",
       "1295122    10234.0\n",
       "1295211    10392.0\n",
       "1295220    10847.0\n",
       "            ...   \n",
       "3954962    10465.0\n",
       "3954963    10440.0\n",
       "3954965    18244.0\n",
       "3954972    10573.0\n",
       "3954973    10573.0\n",
       "Length: 599465, dtype: float64"
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "total_person[total_person > 10000]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f4526c7",
   "metadata": {},
   "source": [
    "## Export results"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c20c8d1",
   "metadata": {},
   "source": [
    "Filter the results to the original Colouring Sydney buildings only. Optionally export results as a csv."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "f147cf0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#building_results = results_2.filter(items=nodes[nodes['connect_type'] == 'poi'].index, axis=0)\n",
    "# think it can just be done like this\n",
    "building_results = results_3[nodes['connect_type'] == 'poi']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "9d4dcabb",
   "metadata": {},
   "outputs": [],
   "source": [
    "building_results.to_csv(\"HTS_5_bf_results_230322_wjobks.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "392798cc",
   "metadata": {},
   "source": [
    "Import building footprints and join the data to them, then export these polygons."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "30eb0506",
   "metadata": {},
   "outputs": [],
   "source": [
    "buildings_foot = gpd.read_file(folder +\n",
    "    \"Data\\\\Colouring\\\\Building Footprints\\\\sydney_bf.shp\").to_crs(proj_crs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "cb0cf386",
   "metadata": {},
   "outputs": [],
   "source": [
    "results_gdf = gpd.GeoDataFrame(building_results, geometry = gpd.GeoSeries.from_xy(building_results.x, building_results.y, crs=\"EPSG:7856\"))\n",
    "\n",
    "# join to data\n",
    "buildings_foot = gpd.sjoin(buildings_foot, results_gdf, how='left', predicate='contains')\n",
    "\n",
    "buildings_foot.to_file(\"HTS_5_bf_results_230322_wjobs.gpkg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4c3a227",
   "metadata": {},
   "source": [
    "### Import Walkscore and compare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "27124033",
   "metadata": {},
   "outputs": [],
   "source": [
    "walkscore = gpd.read_file(folder +\n",
    "    \"Walkability\\\\Walkscore scraping\\\\Interpolation\\\\WS_interpolate4.gpkg\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "128f6be5",
   "metadata": {},
   "outputs": [],
   "source": [
    "walkscore = walkscore.set_crs(proj_crs, allow_override=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "4ec338c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# join to data\n",
    "results_WS = gpd.sjoin(buildings_foot, walkscore, how='right', predicate='contains', rsuffix='_ws')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "123a0cb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "correlations = results_WS.corr(method='pearson', min_periods=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "d4d6f3dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "index_left      0.007445\n",
       "Shape_Leng      0.628795\n",
       "Shape_Area      0.550232\n",
       "index_right     0.492472\n",
       "x               0.360236\n",
       "                  ...   \n",
       "WS.number       0.195532\n",
       "Walkscore       0.472459\n",
       "Walkscore.y     0.472459\n",
       "interpolatew    0.819129\n",
       "combinedWS      0.699252\n",
       "Name: Walk_Index, Length: 189, dtype: float64"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "correlations['Walk_Index']"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
